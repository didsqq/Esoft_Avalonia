// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ObjectivePlatformApp.Data;

#nullable disable

namespace ObjectivePlatformApp.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250529073535_IntialCreate")]
    partial class IntialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ObjectivePlatformApp.Models.Agents", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Commision")
                        .HasColumnType("int")
                        .HasAnnotation("CheckConstraint", "Commision > 0 AND Commision < 100");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Agents");
                });

            modelBuilder.Entity("ObjectivePlatformApp.Models.Clients", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("Phone")
                        .IsUnique()
                        .HasFilter("[Phone] IS NOT NULL");

                    b.ToTable("Clients", t =>
                        {
                            t.HasCheckConstraint("CK_Clients_EmailOrPhone", "Email IS NOT NULL OR Phone IS NOT NULL");
                        });
                });

            modelBuilder.Entity("ObjectivePlatformApp.Models.Deal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("BuyerAgentDeductions")
                        .HasColumnType("float");

                    b.Property<double>("CompanyDeductions")
                        .HasColumnType("float");

                    b.Property<int>("DemandId")
                        .HasColumnType("int");

                    b.Property<int>("OfferId")
                        .HasColumnType("int");

                    b.Property<double>("SellerAgentDeductions")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("DemandId")
                        .IsUnique();

                    b.HasIndex("OfferId")
                        .IsUnique();

                    b.ToTable("Deals");
                });

            modelBuilder.Entity("ObjectivePlatformApp.Models.Demands", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AgentId")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int?>("DistrictId")
                        .HasColumnType("int");

                    b.Property<string>("Flat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("House")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaxPrice")
                        .HasColumnType("int")
                        .HasAnnotation("CheckConstraint", "MaxPrice > 0");

                    b.Property<int>("MinPrice")
                        .HasColumnType("int")
                        .HasAnnotation("CheckConstraint", "MinPrice > 0");

                    b.Property<int>("RealEstateTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.HasIndex("ClientId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("RealEstateTypeId");

                    b.ToTable("Demands");
                });

            modelBuilder.Entity("ObjectivePlatformApp.Models.Districts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Area")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Districts");
                });

            modelBuilder.Entity("ObjectivePlatformApp.Models.FlatDemands", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DemandId")
                        .HasColumnType("int");

                    b.Property<double>("MaxArea")
                        .HasColumnType("float");

                    b.Property<int>("MaxFloor")
                        .HasColumnType("int");

                    b.Property<int>("MaxRoomsCount")
                        .HasColumnType("int");

                    b.Property<double>("MinArea")
                        .HasColumnType("float");

                    b.Property<int>("MinFloor")
                        .HasColumnType("int");

                    b.Property<int>("MinRoomsCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DemandId")
                        .IsUnique();

                    b.ToTable("FlatDemands");
                });

            modelBuilder.Entity("ObjectivePlatformApp.Models.HouseDemands", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DemandId")
                        .HasColumnType("int");

                    b.Property<double>("MaxArea")
                        .HasColumnType("float");

                    b.Property<int>("MaxFloorCount")
                        .HasColumnType("int");

                    b.Property<int>("MaxRoomsCount")
                        .HasColumnType("int");

                    b.Property<double>("MinArea")
                        .HasColumnType("float");

                    b.Property<int>("MinFloorCount")
                        .HasColumnType("int");

                    b.Property<int>("MinRoomsCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DemandId")
                        .IsUnique();

                    b.ToTable("HouseDemands");
                });

            modelBuilder.Entity("ObjectivePlatformApp.Models.LandDemands", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DemandId")
                        .HasColumnType("int");

                    b.Property<double>("MaxArea")
                        .HasColumnType("float");

                    b.Property<double>("MinArea")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("DemandId")
                        .IsUnique();

                    b.ToTable("LandDemands");
                });

            modelBuilder.Entity("ObjectivePlatformApp.Models.Offers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AgentId")
                        .HasColumnType("int");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int")
                        .HasAnnotation("CheckConstraint", "Price > 0");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.HasIndex("ClientId");

                    b.ToTable("Offers");
                });

            modelBuilder.Entity("ObjectivePlatformApp.Models.RealEstateType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RealEstateTypes");
                });

            modelBuilder.Entity("ObjectivePlatformApp.Models.RealEstates", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double?>("Area")
                        .HasColumnType("float");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DistrictId")
                        .HasColumnType("int");

                    b.Property<int?>("Flat")
                        .HasColumnType("int");

                    b.Property<int?>("Floor")
                        .HasColumnType("int");

                    b.Property<int?>("House")
                        .HasColumnType("int");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float")
                        .HasAnnotation("CheckConstraint", "Latitude >= -90 AND Latitude <= 90");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float")
                        .HasAnnotation("CheckConstraint", "Longitude >= -180 AND Longitude <= 180");

                    b.Property<int>("RealEstateTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("Rooms")
                        .HasColumnType("int");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.HasIndex("RealEstateTypeId");

                    b.ToTable("RealEstates");
                });

            modelBuilder.Entity("ObjectivePlatformApp.Models.Deal", b =>
                {
                    b.HasOne("ObjectivePlatformApp.Models.Demands", "Demand")
                        .WithOne("Deal")
                        .HasForeignKey("ObjectivePlatformApp.Models.Deal", "DemandId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ObjectivePlatformApp.Models.Offers", "Offer")
                        .WithOne("Deal")
                        .HasForeignKey("ObjectivePlatformApp.Models.Deal", "OfferId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Demand");

                    b.Navigation("Offer");
                });

            modelBuilder.Entity("ObjectivePlatformApp.Models.Demands", b =>
                {
                    b.HasOne("ObjectivePlatformApp.Models.Agents", "Agent")
                        .WithMany("Demands")
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ObjectivePlatformApp.Models.Clients", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ObjectivePlatformApp.Models.Districts", "District")
                        .WithMany("Demands")
                        .HasForeignKey("DistrictId");

                    b.HasOne("ObjectivePlatformApp.Models.RealEstateType", "RealEstateType")
                        .WithMany("Demands")
                        .HasForeignKey("RealEstateTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agent");

                    b.Navigation("Client");

                    b.Navigation("District");

                    b.Navigation("RealEstateType");
                });

            modelBuilder.Entity("ObjectivePlatformApp.Models.FlatDemands", b =>
                {
                    b.HasOne("ObjectivePlatformApp.Models.Demands", "Demand")
                        .WithOne("FlatDemands")
                        .HasForeignKey("ObjectivePlatformApp.Models.FlatDemands", "DemandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Demand");
                });

            modelBuilder.Entity("ObjectivePlatformApp.Models.HouseDemands", b =>
                {
                    b.HasOne("ObjectivePlatformApp.Models.Demands", "Demand")
                        .WithOne("HouseDemands")
                        .HasForeignKey("ObjectivePlatformApp.Models.HouseDemands", "DemandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Demand");
                });

            modelBuilder.Entity("ObjectivePlatformApp.Models.LandDemands", b =>
                {
                    b.HasOne("ObjectivePlatformApp.Models.Demands", "Demand")
                        .WithOne("LandDemands")
                        .HasForeignKey("ObjectivePlatformApp.Models.LandDemands", "DemandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Demand");
                });

            modelBuilder.Entity("ObjectivePlatformApp.Models.Offers", b =>
                {
                    b.HasOne("ObjectivePlatformApp.Models.Agents", "Agent")
                        .WithMany("Offers")
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ObjectivePlatformApp.Models.Clients", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agent");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("ObjectivePlatformApp.Models.RealEstates", b =>
                {
                    b.HasOne("ObjectivePlatformApp.Models.Districts", "District")
                        .WithMany("RealEstates")
                        .HasForeignKey("DistrictId");

                    b.HasOne("ObjectivePlatformApp.Models.RealEstateType", "RealEstateType")
                        .WithMany("RealEstates")
                        .HasForeignKey("RealEstateTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");

                    b.Navigation("RealEstateType");
                });

            modelBuilder.Entity("ObjectivePlatformApp.Models.Agents", b =>
                {
                    b.Navigation("Demands");

                    b.Navigation("Offers");
                });

            modelBuilder.Entity("ObjectivePlatformApp.Models.Demands", b =>
                {
                    b.Navigation("Deal");

                    b.Navigation("FlatDemands");

                    b.Navigation("HouseDemands");

                    b.Navigation("LandDemands");
                });

            modelBuilder.Entity("ObjectivePlatformApp.Models.Districts", b =>
                {
                    b.Navigation("Demands");

                    b.Navigation("RealEstates");
                });

            modelBuilder.Entity("ObjectivePlatformApp.Models.Offers", b =>
                {
                    b.Navigation("Deal");
                });

            modelBuilder.Entity("ObjectivePlatformApp.Models.RealEstateType", b =>
                {
                    b.Navigation("Demands");

                    b.Navigation("RealEstates");
                });
#pragma warning restore 612, 618
        }
    }
}
